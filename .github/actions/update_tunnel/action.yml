name: Update Tunnel
description: Updates the Cloudflared Tunnel to work with a new provider

inputs:
  SERVICE_URL:
    description: 'The URL of the service to route traffic to'
    required: true
  CLOUDFLARE_API_TOKEN:
    description: 'Cloudflare API token'
    required: true
  CLOUDFLARE_ACCOUNT_ID:
    description: 'Cloudflare account ID'
    required: true
  CLOUDFLARE_TUNNEL_ID:
    description: 'Cloudflare tunnel ID'
    required: true
  HOSTNAME:
    description: 'The hostname to route traffic to'
    required: false
  HOST_HEADER_OVERRIDE:
    description: 'Override the host header (only needed for providers requiring specific host headers)'
    required: false

runs:
  using: composite
  steps:
    - name: Update Tunnel Configuration
      shell: bash
      env:
        SERVICE_URL: ${{ inputs.SERVICE_URL }}
        CLOUDFLARE_API_TOKEN: ${{ inputs.CLOUDFLARE_API_TOKEN }}
        CLOUDFLARE_ACCOUNT_ID: ${{ inputs.CLOUDFLARE_ACCOUNT_ID }}
        CLOUDFLARE_TUNNEL_ID: ${{ inputs.CLOUDFLARE_TUNNEL_ID }}
        HOSTNAME: ${{ inputs.HOSTNAME }}
        HOST_HEADER_OVERRIDE: ${{ inputs.HOST_HEADER_OVERRIDE }}
      run: |
        # Build originRequest configuration
        ORIGIN_REQUEST='{
          "connectTimeout": 10,
          "noHappyEyeballs": false,
          "keepAliveTimeout": 30,
          "keepAliveConnections": 10'
        
        if [ -n "$HOST_HEADER_OVERRIDE" ]; then
          ORIGIN_REQUEST="$ORIGIN_REQUEST, \"httpHostHeader\": \"$HOST_HEADER_OVERRIDE\""
          echo "Using custom host header: $HOST_HEADER_OVERRIDE"
        else
          echo "Using default host header behavior"
        fi
        
        ORIGIN_REQUEST="$ORIGIN_REQUEST }"
        
        TUNNEL_CONFIG='{
          "config": {
            "ingress": [
              {
                "hostname": "'$HOSTNAME'",
                "service": "'$SERVICE_URL'",
                "originRequest": '$ORIGIN_REQUEST'
              },
              {
                "service": "http_status:404"
              }
            ]
          }
        }'
        
        echo "Updating tunnel configuration..."
        
        UPDATE_RESPONSE=$(curl -s -X PUT \
          "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT_ID}/cfd_tunnel/${CLOUDFLARE_TUNNEL_ID}/configurations" \
          -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
          -H "Content-Type: application/json" \
          --data "$TUNNEL_CONFIG")
        
        if echo $UPDATE_RESPONSE | jq -e '.success == true' > /dev/null; then
          echo "✅ Tunnel configuration updated successfully"
        else
          echo "❌ Failed to update tunnel configuration"
          echo $UPDATE_RESPONSE | jq '.'
          exit 1
        fi