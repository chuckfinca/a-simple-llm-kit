name: Debug Cloudflare Tunnel

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to debug'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  debug-tunnel:
    name: Debug Cloudflare Tunnel Configuration
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
      - name: Install jq
        run: sudo apt-get install jq
      
      - name: Verify API Token
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API }}
        run: |
          echo "Verifying API token permissions..."
          RESPONSE=$(curl -s -X GET "https://api.cloudflare.com/client/v4/user/tokens/verify" \
            -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}")
          echo "Token verification response:"
          echo $RESPONSE | jq '.'
          
          if echo $RESPONSE | jq -e '.success == true' > /dev/null; then
            echo "✅ Token is valid"
          else
            echo "❌ Token verification failed"
            exit 1
          fi

      - name: Check Tunnel Status
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API }}
          CLOUDFLARE_ACCOUNT: ${{ secrets.CLOUDFLARE_ACCOUNT }}
          TUNNEL_ID: ${{ secrets.CLOUDFLARE_TUNNEL }}
        run: |
          echo "Checking tunnel status..."
          echo "Tunnel ID: ${TUNNEL_ID}"
          
          # Try both possible API endpoints
          echo "Trying new API endpoint..."
          NEW_RESPONSE=$(curl -s -X GET \
            "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT}/tunnels/${TUNNEL_ID}" \
            -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}")
          
          echo "Trying legacy API endpoint..."
          OLD_RESPONSE=$(curl -s -X GET \
            "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT}/cfd_tunnel/${TUNNEL_ID}" \
            -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}")
          
          echo "New API response:"
          echo $NEW_RESPONSE | jq '.'
          echo "Legacy API response:"
          echo $OLD_RESPONSE | jq '.'
          
          # Determine which endpoint worked
          if echo $NEW_RESPONSE | jq -e '.success == true' > /dev/null; then
            echo "✅ New API endpoint works"
            echo "API_ENDPOINT=new" >> $GITHUB_ENV
          elif echo $OLD_RESPONSE | jq -e '.success == true' > /dev/null; then
            echo "✅ Legacy API endpoint works"
            echo "API_ENDPOINT=old" >> $GITHUB_ENV
          else
            echo "❌ Neither API endpoint worked"
            exit 1
          fi

      - name: Get Current Configuration
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API }}
          CLOUDFLARE_ACCOUNT: ${{ secrets.CLOUDFLARE_ACCOUNT }}
          TUNNEL_ID: ${{ secrets.CLOUDFLARE_TUNNEL }}
        run: |
          echo "Getting current tunnel configuration..."
          
          if [[ "$API_ENDPOINT" == "new" ]]; then
            ENDPOINT="tunnels"
          else
            ENDPOINT="cfd_tunnel"
          fi
          
          CONFIG_RESPONSE=$(curl -s -X GET \
            "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT}/${ENDPOINT}/${TUNNEL_ID}/configurations" \
            -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}")
          
          echo "Current configuration:"
          echo $CONFIG_RESPONSE | jq '.'

      - name: Test Configuration Update
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API }}
          CLOUDFLARE_ACCOUNT: ${{ secrets.CLOUDFLARE_ACCOUNT }}
          TUNNEL_ID: ${{ secrets.CLOUDFLARE_TUNNEL }}
        run: |
          echo "Testing configuration update..."
          
          if [[ "$API_ENDPOINT" == "new" ]]; then
            ENDPOINT="tunnels"
            METHOD="PATCH"
          else
            ENDPOINT="cfd_tunnel"
            METHOD="PUT"
          fi
          
          # Create a test configuration
          TEST_CONFIG='{
            "config": {
              "ingress": [
                {
                  "hostname": "api.appsimple.io",
                  "service": "https://test-url.modal.run"
                },
                {
                  "service": "http_status:404"
                }
              ]
            }
          }'
          
          echo "Using endpoint: ${ENDPOINT}"
          echo "Using method: ${METHOD}"
          echo "Test configuration:"
          echo $TEST_CONFIG | jq '.'
          
          UPDATE_RESPONSE=$(curl -v -X ${METHOD} \
            "https://api.cloudflare.com/client/v4/accounts/${CLOUDFLARE_ACCOUNT}/${ENDPOINT}/${TUNNEL_ID}/configurations" \
            -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
            -H "Content-Type: application/json" \
            --data "$TEST_CONFIG")
          
          echo "Update response:"
          echo $UPDATE_RESPONSE | jq '.'
          
          if echo $UPDATE_RESPONSE | jq -e '.success == true' > /dev/null; then
            echo "✅ Configuration update successful"
            echo "Working configuration:"
            echo "- API Endpoint: ${ENDPOINT}"
            echo "- HTTP Method: ${METHOD}"
          else
            echo "❌ Configuration update failed"
            exit 1
          fi
